{"version":3,"sources":["duck-bill/tests/adapters/coupon.jshint.js","duck-bill/tests/adapters/customer.jshint.js","duck-bill/tests/adapters/plan.jshint.js","duck-bill/tests/adapters/subscription.jshint.js","duck-bill/tests/app.jshint.js","duck-bill/tests/components/signup-plans.jshint.js","duck-bill/tests/controllers/plans.jshint.js","duck-bill/tests/controllers/signup.jshint.js","duck-bill/tests/helpers/destroy-app.js","duck-bill/tests/helpers/destroy-app.jshint.js","duck-bill/tests/helpers/ember-power-select.js","duck-bill/tests/helpers/module-for-acceptance.js","duck-bill/tests/helpers/module-for-acceptance.jshint.js","duck-bill/tests/helpers/resolver.js","duck-bill/tests/helpers/resolver.jshint.js","duck-bill/tests/helpers/start-app.js","duck-bill/tests/helpers/start-app.jshint.js","duck-bill/tests/integration/components/signup-plans-test.js","duck-bill/tests/integration/components/signup-plans-test.jshint.js","duck-bill/tests/models/coupon.jshint.js","duck-bill/tests/models/customer.jshint.js","duck-bill/tests/models/plan.jshint.js","duck-bill/tests/models/subscription.jshint.js","duck-bill/tests/resolver.jshint.js","duck-bill/tests/router.jshint.js","duck-bill/tests/routes/signup.jshint.js","duck-bill/tests/serializers/coupon.jshint.js","duck-bill/tests/serializers/customer.jshint.js","duck-bill/tests/serializers/plan.jshint.js","duck-bill/tests/serializers/subscription.jshint.js","duck-bill/tests/test-helper.js","duck-bill/tests/test-helper.jshint.js","duck-bill/tests/unit/adapters/application-test.js","duck-bill/tests/unit/adapters/application-test.jshint.js","duck-bill/tests/unit/adapters/subscription-test.js","duck-bill/tests/unit/adapters/subscription-test.jshint.js","duck-bill/tests/unit/controllers/plans-test.js","duck-bill/tests/unit/controllers/plans-test.jshint.js","duck-bill/tests/unit/controllers/signup-test.js","duck-bill/tests/unit/controllers/signup-test.jshint.js","duck-bill/tests/unit/models/coupon-test.js","duck-bill/tests/unit/models/coupon-test.jshint.js","duck-bill/tests/unit/models/customer-test.js","duck-bill/tests/unit/models/customer-test.jshint.js","duck-bill/tests/unit/models/plan-test.js","duck-bill/tests/unit/models/plan-test.jshint.js","duck-bill/tests/unit/models/subscription-test.js","duck-bill/tests/unit/models/subscription-test.jshint.js","duck-bill/tests/unit/routes/plans-test.js","duck-bill/tests/unit/routes/plans-test.jshint.js","duck-bill/tests/unit/routes/signup-test.js","duck-bill/tests/unit/routes/signup-test.jshint.js","duck-bill/tests/unit/serializers/application-test.js","duck-bill/tests/unit/serializers/application-test.jshint.js","duck-bill/tests/unit/serializers/subscription-test.js","duck-bill/tests/unit/serializers/subscription-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('duck-bill/tests/adapters/coupon.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - adapters');\n  QUnit.test('adapters/coupon.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/coupon.js should pass jshint.');\n  });\n});","define('duck-bill/tests/adapters/customer.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - adapters');\n  QUnit.test('adapters/customer.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/customer.js should pass jshint.');\n  });\n});","define('duck-bill/tests/adapters/plan.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - adapters');\n  QUnit.test('adapters/plan.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/plan.js should pass jshint.');\n  });\n});","define('duck-bill/tests/adapters/subscription.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - adapters');\n  QUnit.test('adapters/subscription.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/subscription.js should pass jshint.');\n  });\n});","define('duck-bill/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('app.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('duck-bill/tests/components/signup-plans.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components');\n  QUnit.test('components/signup-plans.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/signup-plans.js should pass jshint.');\n  });\n});","define('duck-bill/tests/controllers/plans.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers');\n  QUnit.test('controllers/plans.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/plans.js should pass jshint.');\n  });\n});","define('duck-bill/tests/controllers/signup.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers');\n  QUnit.test('controllers/signup.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/signup.js should pass jshint.\\ncontrollers/signup.js: line 81, col 50, \\'response\\' is defined but never used.\\n\\n1 error');\n  });\n});","define('duck-bill/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('duck-bill/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/destroy-app.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('duck-bill/tests/helpers/ember-power-select', ['exports', 'ember'], function (exports, _ember) {\n  exports.triggerKeydown = triggerKeydown;\n  exports.typeInSearch = typeInSearch;\n  exports.clickTrigger = clickTrigger;\n\n  // Helpers for integration tests\n\n  function typeText(selector, text) {\n    $(selector).val(text);\n    $(selector).trigger('input');\n  }\n\n  function triggerKeydown(domElement, k) {\n    var oEvent = document.createEvent(\"Events\");\n    oEvent.initEvent('keydown', true, true);\n    $.extend(oEvent, {\n      view: window,\n      ctrlKey: false,\n      altKey: false,\n      shiftKey: false,\n      metaKey: false,\n      keyCode: k,\n      charCode: k\n    });\n    _ember['default'].run(function () {\n      domElement.dispatchEvent(oEvent);\n    });\n  }\n\n  function typeInSearch(text) {\n    _ember['default'].run(function () {\n      typeText('.ember-power-select-search input, .ember-power-select-trigger-multiple-input', text);\n    });\n  }\n\n  function clickTrigger(scope) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var selector = '.ember-power-select-trigger';\n    if (scope) {\n      selector = scope + ' ' + selector;\n    }\n    var event = new window.Event('mousedown', { bubbles: true, cancelable: true, view: window });\n    Object.keys(options).forEach(function (key) {\n      return event[key] = options[key];\n    });\n    _ember['default'].run(function () {\n      return _ember['default'].$(selector)[0].dispatchEvent(event);\n    });\n  }\n\n  // Helpers for acceptance tests\n\n  exports['default'] = function () {\n    var isEmberOne = _ember['default'].VERSION.match(/1\\.13/);\n\n    _ember['default'].Test.registerAsyncHelper('selectChoose', function (app, cssPath, value) {\n      var id = find(cssPath).find('.ember-power-select-trigger').attr('class').match(/ember-power-select-trigger-ember(\\d+)/)[1];\n      // If the dropdown is closed, open it\n      if (_ember['default'].$('.ember-power-select-dropdown-ember' + id).length === 0) {\n        click(cssPath + ' .ember-power-select-trigger');\n      }\n\n      // Select the option with the given text\n      click('.ember-power-select-dropdown-ember' + id + ' .ember-power-select-option:contains(\"' + value + '\")');\n    });\n\n    _ember['default'].Test.registerAsyncHelper('selectSearch', function (app, cssPath, value) {\n      var id = find(cssPath).find('.ember-power-select-trigger').attr('class').match(/ember-power-select-trigger-ember(\\d+)/)[1];\n      var isMultipleSelect = _ember['default'].$(cssPath + ' .ember-power-select-trigger-multiple-input').length > 0;\n\n      var dropdownIsClosed = _ember['default'].$('.ember-power-select-dropdown-ember' + id).length === 0;\n      if (dropdownIsClosed) {\n        click(cssPath + ' .ember-power-select-trigger');\n      }\n\n      if (isMultipleSelect) {\n        fillIn(cssPath + ' .ember-power-select-trigger-multiple-input', value);\n        if (isEmberOne) {\n          triggerEvent(cssPath + ' .ember-power-select-trigger-multiple-input', 'input');\n        }\n      } else {\n        fillIn('.ember-power-select-search input', value);\n        if (isEmberOne) {\n          triggerEvent('.ember-power-select-dropdown-ember' + id + ' .ember-power-select-search input', 'input');\n        }\n      }\n    });\n  };\n});","define('duck-bill/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'duck-bill/tests/helpers/start-app', 'duck-bill/tests/helpers/destroy-app'], function (exports, _qunit, _duckBillTestsHelpersStartApp, _duckBillTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _duckBillTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        (0, _duckBillTestsHelpersDestroyApp['default'])(this.application);\n\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n      }\n    });\n  };\n});","define('duck-bill/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/module-for-acceptance.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('duck-bill/tests/helpers/resolver', ['exports', 'duck-bill/resolver', 'duck-bill/config/environment'], function (exports, _duckBillResolver, _duckBillConfigEnvironment) {\n\n  var resolver = _duckBillResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _duckBillConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _duckBillConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('duck-bill/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/resolver.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('duck-bill/tests/helpers/start-app', ['exports', 'ember', 'duck-bill/app', 'duck-bill/config/environment'], function (exports, _ember, _duckBillApp, _duckBillConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _duckBillConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _duckBillApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('duck-bill/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/start-app.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('duck-bill/tests/integration/components/signup-plans-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('signup-plans', 'Integration | Component | signup plans', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\"\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 16\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'signup-plans', ['loc', [null, [1, 0], [1, 16]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\"\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'signup-plans', [], [], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('duck-bill/tests/integration/components/signup-plans-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components');\n  QUnit.test('integration/components/signup-plans-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/signup-plans-test.js should pass jshint.');\n  });\n});","define('duck-bill/tests/models/coupon.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models');\n  QUnit.test('models/coupon.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/coupon.js should pass jshint.');\n  });\n});","define('duck-bill/tests/models/customer.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models');\n  QUnit.test('models/customer.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/customer.js should pass jshint.');\n  });\n});","define('duck-bill/tests/models/plan.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models');\n  QUnit.test('models/plan.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/plan.js should pass jshint.');\n  });\n});","define('duck-bill/tests/models/subscription.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models');\n  QUnit.test('models/subscription.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/subscription.js should pass jshint.');\n  });\n});","define('duck-bill/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('resolver.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('duck-bill/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('router.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('duck-bill/tests/routes/signup.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes');\n  QUnit.test('routes/signup.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/signup.js should pass jshint.');\n  });\n});","define('duck-bill/tests/serializers/coupon.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers');\n  QUnit.test('serializers/coupon.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/coupon.js should pass jshint.');\n  });\n});","define('duck-bill/tests/serializers/customer.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers');\n  QUnit.test('serializers/customer.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/customer.js should pass jshint.');\n  });\n});","define('duck-bill/tests/serializers/plan.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers');\n  QUnit.test('serializers/plan.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/plan.js should pass jshint.');\n  });\n});","define('duck-bill/tests/serializers/subscription.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers');\n  QUnit.test('serializers/subscription.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/subscription.js should pass jshint.');\n  });\n});","define('duck-bill/tests/test-helper', ['exports', 'duck-bill/tests/helpers/resolver', 'ember-qunit'], function (exports, _duckBillTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_duckBillTestsHelpersResolver['default']);\n});","define('duck-bill/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('test-helper.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('duck-bill/tests/unit/adapters/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('duck-bill/tests/unit/adapters/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/adapters');\n  QUnit.test('unit/adapters/application-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass jshint.');\n  });\n});","define('duck-bill/tests/unit/adapters/subscription-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:subscription', 'Unit | Adapter | subscription', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('duck-bill/tests/unit/adapters/subscription-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/adapters');\n  QUnit.test('unit/adapters/subscription-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/subscription-test.js should pass jshint.');\n  });\n});","define('duck-bill/tests/unit/controllers/plans-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:plans', 'Unit | Controller | plans', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('duck-bill/tests/unit/controllers/plans-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers');\n  QUnit.test('unit/controllers/plans-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/plans-test.js should pass jshint.');\n  });\n});","define('duck-bill/tests/unit/controllers/signup-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:signup', 'Unit | Controller | signup', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('duck-bill/tests/unit/controllers/signup-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers');\n  QUnit.test('unit/controllers/signup-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/signup-test.js should pass jshint.');\n  });\n});","define('duck-bill/tests/unit/models/coupon-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('coupon', 'Unit | Model | coupon', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('duck-bill/tests/unit/models/coupon-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models');\n  QUnit.test('unit/models/coupon-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/coupon-test.js should pass jshint.');\n  });\n});","define('duck-bill/tests/unit/models/customer-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('customer', 'Unit | Model | customer', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('duck-bill/tests/unit/models/customer-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models');\n  QUnit.test('unit/models/customer-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/customer-test.js should pass jshint.');\n  });\n});","define('duck-bill/tests/unit/models/plan-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('plan', 'Unit | Model | plan', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('duck-bill/tests/unit/models/plan-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models');\n  QUnit.test('unit/models/plan-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/plan-test.js should pass jshint.');\n  });\n});","define('duck-bill/tests/unit/models/subscription-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('subscription', 'Unit | Model | subscription', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('duck-bill/tests/unit/models/subscription-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models');\n  QUnit.test('unit/models/subscription-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/subscription-test.js should pass jshint.');\n  });\n});","define('duck-bill/tests/unit/routes/plans-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:plans', 'Unit | Route | plans', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('duck-bill/tests/unit/routes/plans-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes');\n  QUnit.test('unit/routes/plans-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/plans-test.js should pass jshint.');\n  });\n});","define('duck-bill/tests/unit/routes/signup-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:signup', 'Unit | Route | signup', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('duck-bill/tests/unit/routes/signup-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes');\n  QUnit.test('unit/routes/signup-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/signup-test.js should pass jshint.');\n  });\n});","define('duck-bill/tests/unit/serializers/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('application', 'Unit | Serializer | application', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:application']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('duck-bill/tests/unit/serializers/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/serializers');\n  QUnit.test('unit/serializers/application-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/application-test.js should pass jshint.');\n  });\n});","define('duck-bill/tests/unit/serializers/subscription-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('subscription', 'Unit | Serializer | subscription', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:subscription']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('duck-bill/tests/unit/serializers/subscription-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/serializers');\n  QUnit.test('unit/serializers/subscription-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/subscription-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('duck-bill/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}